from calculate.calculator_normal import CalculatorNormal
from calculate.calculator_deriv import CalculatorDerivation
import unittest


class TestTree(unittest.TestCase):
    def test_normal_simple(self):
        """
        test if the calculator is constructed correctly given some simple expression
        :return: nothing
        """
        cal1 = CalculatorNormal("x", -10, 10, 50)
        self.assertEqual(cal1.get_points(), [[-10.0, -9.591836734693878, -9.183673469387756, -8.775510204081632,
                                              -8.36734693877551, -7.959183673469388, -7.551020408163265,
                                              -7.142857142857142, -6.73469387755102, -6.326530612244898,
                                              -5.918367346938775, -5.510204081632653, -5.1020408163265305,
                                              -4.6938775510204085, -4.285714285714286, -3.8775510204081636,
                                              -3.4693877551020407, -3.0612244897959187, -2.6530612244897958,
                                              -2.2448979591836737, -1.8367346938775508, -1.4285714285714288,
                                              -1.0204081632653068, -0.612244897959183, -0.204081632653061,
                                              0.204081632653061, 0.612244897959183, 1.0204081632653068,
                                              1.4285714285714288, 1.8367346938775508, 2.244897959183673,
                                              2.6530612244897966, 3.0612244897959187, 3.4693877551020407,
                                              3.8775510204081627, 4.2857142857142865, 4.6938775510204085,
                                              5.1020408163265305, 5.5102040816326525, 5.918367346938776,
                                              6.326530612244898, 6.73469387755102, 7.142857142857142,
                                              7.551020408163264, 7.959183673469386, 8.367346938775512,
                                              8.775510204081634, 9.183673469387756, 9.591836734693878, 10.0],
                                             [-10.0, -9.591836734693878, -9.183673469387756, -8.775510204081632,
                                              -8.36734693877551, -7.959183673469388, -7.551020408163265,
                                              -7.142857142857142, -6.73469387755102, -6.326530612244898,
                                              -5.918367346938775, -5.510204081632653, -5.1020408163265305,
                                              -4.6938775510204085, -4.285714285714286, -3.8775510204081636,
                                              -3.4693877551020407, -3.0612244897959187, -2.6530612244897958,
                                              -2.2448979591836737, -1.8367346938775508, -1.4285714285714288,
                                              -1.0204081632653068, -0.612244897959183, -0.204081632653061,
                                              0.204081632653061, 0.612244897959183, 1.0204081632653068,
                                              1.4285714285714288, 1.8367346938775508, 2.244897959183673,
                                              2.6530612244897966, 3.0612244897959187, 3.4693877551020407,
                                              3.8775510204081627, 4.2857142857142865, 4.6938775510204085,
                                              5.1020408163265305, 5.5102040816326525, 5.918367346938776,
                                              6.326530612244898, 6.73469387755102, 7.142857142857142, 7.551020408163264,
                                              7.959183673469386, 8.367346938775512, 8.775510204081634,
                                              9.183673469387756,
                                              9.591836734693878, 10.0]])

        cal2 = CalculatorNormal("3x^2", -1, 2, 20)
        self.assertEqual(cal2.get_points(), [[-1.0, -0.8421052631578947, -0.6842105263157895, -0.5263157894736843,
                                              -0.368421052631579, -0.21052631578947367, -0.052631578947368474,
                                              0.10526315789473695, 0.26315789473684204, 0.42105263157894735,
                                              0.5789473684210527, 0.736842105263158, 0.894736842105263,
                                              1.0526315789473686, 1.210526315789474, 1.3684210526315788,
                                              1.526315789473684, 1.6842105263157894, 1.8421052631578947, 2.0],
                                             [3.0, 2.127423822714681, 1.404432132963989, 0.8310249307479227,
                                              0.4072022160664821, 0.13296398891966757, 0.008310249307479242,
                                              0.03324099722991697, 0.2077562326869805, 0.5318559556786703,
                                              1.005540166204986, 1.6288088642659284, 2.4016620498614953,
                                              3.324099722991691, 4.396121883656511, 5.617728531855954,
                                              6.988919667590027, 8.509695290858724, 10.180055401662049, 12.0]])

        cal3 = CalculatorNormal("3sin(x)^x", -2, 3, 20)
        self.assertEqual(cal3.get_points(), [[-2.0, -1.736842105263158, -1.473684210526316, -1.2105263157894737,
                                              -0.9473684210526316, -0.6842105263157894, -0.42105263157894735,
                                              -0.1578947368421053, 0.10526315789473673, 0.36842105263157876,
                                              0.6315789473684212, 0.8947368421052633, 1.1578947368421053,
                                              1.4210526315789473, 1.6842105263157894, 1.9473684210526314,
                                              2.2105263157894735, 2.473684210526316, 2.7368421052631575, 3.0],
                                             [3.628351311189114, None, None, None, None, None, None, None,
                                              2.3665654833698966, 2.0592887578021175, 2.1507569314807276,
                                              2.402129743051113, 2.7100572391683384, 2.952405119264059,
                                              2.967610763132801, 2.6042512557088195, 1.843332734904267,
                                              0.9171253270220854, 0.23411164603770407, 0.00843115420338382]])

        cal4 = CalculatorNormal("3/x + pi", -3, 2, 20)
        self.assertEqual(cal4.get_points(), [[-3.0, -2.736842105263158, -2.473684210526316, -2.2105263157894735,
                                              -1.9473684210526316, -1.6842105263157894, -1.4210526315789473,
                                              -1.1578947368421053, -0.8947368421052633, -0.6315789473684212,
                                              -0.36842105263157876, -0.10526315789473673, 0.1578947368421053,
                                              0.42105263157894735, 0.6842105263157894, 0.9473684210526314,
                                              1.2105263157894735, 1.473684210526316, 1.7368421052631575, 2.0],
                                             [2.141592653589793, 2.0454388074359473, 1.9288266961429847,
                                              1.784449796446936, 1.6010521130492525, 1.3603426535897931,
                                              1.030481542478682, 0.5506835626807023, -0.21134852288079475,
                                              -1.608407346410205, -5.001264489267355, -25.35840734641024,
                                              22.141592653589786, 10.266592653589793, 7.526208038205178,
                                              6.308259320256461, 5.619853523155011, 5.177306939304079,
                                              4.868865380862521, 4.641592653589793]])

        cal5 = CalculatorNormal("x/tan(x) + e", -3, 2, 20)
        self.assertEqual(cal5.get_points(), [[-3.0, -2.736842105263158, -2.473684210526316, -2.2105263157894735,
                                              -1.9473684210526316, -1.6842105263157894, -1.4210526315789473,
                                              -1.1578947368421053, -0.8947368421052633, -0.6315789473684212,
                                              -0.36842105263157876, -0.10526315789473673, 0.1578947368421053,
                                              0.42105263157894735, 0.6842105263157894, 0.9473684210526314,
                                              1.2105263157894735, 1.473684210526316, 1.7368421052631575, 2.0],
                                             [-18.327475825844555, -3.670174979223122, -0.4175071542427946,
                                              1.0733756663897984, 1.9482078795049507, 2.526445216181401,
                                              2.9326804001202844, 3.2255384719691644, 3.436008133878142,
                                              3.5816420446549753, 3.6726223559933873, 3.714585653134177,
                                              3.7099577342261556, 3.6584762702879816, 3.5571358088625855,
                                              3.3995313483073004, 3.1743005876612207, 2.8618460114553956,
                                              2.4272065002722947, 1.8029667197384736]])

    def test_normal_medium(self):
        """
        test if the calculator is constructed correctly given some medium-hard expression
        :return: nothing
        """
        cal1 = CalculatorNormal("-2tan(x)", -1, 2, 20)
        self.assertEqual(cal1.get_points(), [[-1.0, -0.8421052631578947, -0.6842105263157895, -0.5263157894736843,
                                              -0.368421052631579, -0.21052631578947367, -0.052631578947368474,
                                              0.10526315789473695, 0.26315789473684204, 0.42105263157894735,
                                              0.5789473684210527, 0.736842105263158, 0.894736842105263,
                                              1.0526315789473686, 1.210526315789474, 1.3684210526315788,
                                              1.526315789473684, 1.6842105263157894, 1.8421052631578947, 2.0],
                                             [3.1148154493098046, 2.2407380581975023, 1.6312982766956463,
                                              1.1619573100410285, 0.7720955822413634, 0.4273854646472445,
                                              0.10536046161024365, -0.21130734478322502, -0.5388115337670629,
                                              -0.8956713906112532, -1.3073300317925012, -1.8146308583395816,
                                              -2.4932535852446014, -3.507987321912327, -5.3091075371870335,
                                              -9.747343551931277, -44.93382801158653, 17.558801798253622,
                                              7.18990371835351, 4.370079726523038]])

        cal2 = CalculatorNormal("2((x-1.1)(x^1.5))(5^x)", -1, 2, 20)
        self.assertEqual(cal2.get_points(), [[-1.0, -0.8421052631578947, -0.6842105263157895, -0.5263157894736843,
                                              -0.368421052631579, -0.21052631578947367, -0.052631578947368474,
                                              0.10526315789473695, 0.26315789473684204, 0.42105263157894735,
                                              0.5789473684210527, 0.736842105263158, 0.894736842105263,
                                              1.0526315789473686, 1.210526315789474, 1.3684210526315788,
                                              1.526315789473684, 1.6842105263157894, 1.8421052631578947, 2.0],
                                             [None, None, None, None, None, None, None, -0.08048752646151931,
                                              -0.34509415134486127, -0.7305902023876265, -1.1655665094407384,
                                              -1.5038955250060293, -1.466486930264403, -0.556789960018909,
                                              2.065754113529063, 7.774302952887811, 18.75326812499512,
                                              38.40666332908201, 71.95210371560509, 127.27922061357854]])

        cal3 = CalculatorNormal("(x-0.7*2)(3.1/x)(x^5+3)", -2, 4, 40)
        self.assertEqual(cal3.get_points(), [[-2.0, -1.8461538461538463, -1.6923076923076923, -1.5384615384615383,
                                              -1.3846153846153846, -1.2307692307692308, -1.0769230769230769,
                                              -0.9230769230769231, -0.7692307692307692, -0.6153846153846154,
                                              -0.46153846153846145, -0.3076923076923077, -0.15384615384615374, 0.0,
                                              0.15384615384615374, 0.3076923076923075, 0.4615384615384617,
                                              0.6153846153846154, 0.7692307692307692, 0.9230769230769229,
                                              1.076923076923077, 1.2307692307692308, 1.3846153846153846,
                                              1.5384615384615383, 1.6923076923076925, 1.8461538461538463,
                                              2.0, 2.153846153846154, 2.3076923076923075, 2.4615384615384617,
                                              2.615384615384615, 2.769230769230769, 2.9230769230769234,
                                              3.0769230769230766, 3.230769230769231, 3.384615384615385,
                                              3.5384615384615383, 3.6923076923076925, 3.846153846153846, 4.0],
                                             [-152.83, -100.54422662829629, -61.63155376922366, -33.26731837389875,
                                              -13.02472703947197, 1.1654246208519898, 11.062078062338914,
                                              18.176503044765184, 23.87152523209433, 29.561503792153363,
                                              37.248142329642626, 51.56754981914552, 93.9273015381384, None,
                                              -75.3321641129782, -33.045351016582615, -19.042010891667758,
                                              -12.206322951146396, -8.310634506979662, -5.878400037167413,
                                              -4.1371202527384, -2.482531164740513, -0.27862648456430084,
                                              3.2415699757334484, 9.038595539469819, 18.31387474986063,
                                              32.550000000000004, 53.547489435567115, 83.45966606965385,
                                              124.82648007941174, 180.6077094449427, 254.2157806862325,
                                              349.5483496619993, 471.0207264087928, 623.5981960069273,
                                              812.8282685556109, 1044.8728798327443, 1326.5405570230255,
                                              1665.318559295219, 2069.405]])

    def test_normal_complex(self):
        """
        test if the calculator is constructed correctly given some complex expression
        :return: nothing
        """
        cal1 = CalculatorNormal("2(cos(x-1)sin(x+1))*(pi+e)", -2, -0.1, 25)
        self.assertEqual(cal1.get_points(), [[-2.0, -1.9208333333333334, -1.8416666666666668, -1.7625,
                                              -1.6833333333333333, -1.6041666666666667, -1.5250000000000001,
                                              -1.4458333333333333, -1.3666666666666667, -1.2875, -1.2083333333333335,
                                              -1.1291666666666669, -1.0500000000000003, -0.9708333333333334,
                                              -0.8916666666666668, -0.8125, -0.7333333333333334, -0.6541666666666668,
                                              -0.5750000000000002, -0.49583333333333335, -0.41666666666666674,
                                              -0.33750000000000013, -0.2583333333333335, -0.17916666666666692,
                                              -0.10000000000000031],
                                             [9.763136418254296, 9.103735281708103, 8.349885367033005,
                                              7.520445824315017, 6.636166838065521, 5.719170517466919, 4.7923974650209,
                                              3.8790328688551106, 3.0019264762030846, 2.1830209586476075,
                                              1.4428029697800664, 0.7997906282294692, 0.27007024775720956,
                                              -0.13310609590589234, -0.39965209376349964, -0.5228995339068948,
                                              -0.49976512093982645, -0.33082761113433895, -0.02031333361849563,
                                              0.4240095401858831, 0.9910253338018156, 1.6665489478550428,
                                              2.433680730337819, 3.2732292571483987, 4.16419144615678]])

        cal2 = CalculatorNormal("2sin(x)x^3/x", 100, 117, 30)
        self.assertEqual(cal2.get_points(), [[100.0, 100.58620689655173, 101.17241379310344, 101.75862068965517,
                                              102.34482758620689, 102.93103448275862, 103.51724137931035,
                                              104.10344827586206, 104.6896551724138, 105.27586206896552,
                                              105.86206896551724, 106.44827586206897, 107.03448275862068,
                                              107.62068965517241, 108.20689655172414, 108.79310344827586,
                                              109.37931034482759, 109.9655172413793, 110.55172413793103,
                                              111.13793103448276, 111.72413793103448, 112.3103448275862,
                                              112.89655172413794, 113.48275862068965, 114.06896551724138,
                                              114.65517241379311, 115.24137931034483, 115.82758620689656,
                                              116.41379310344828, 117.0],
                                             [-10127.312822195176, 1117.26243606136, 12249.392790209415,
                                              19502.31771494189, 20333.12392689295, 14311.704681167941,
                                              3315.3135303938056, -9053.242966569482, -18644.702942627962,
                                              -22154.30298480986, -18258.628446976247, -8107.859702512694,
                                              5007.678605500955, 16722.32446998697, 23047.256585495637,
                                              21727.327187766663, 13041.449542552447, -236.38760929661123,
                                              -13720.578264405181, -22861.336765569355, -24478.775779509786,
                                              -17866.72897191369, -5083.9124687003705, 9683.252733894828,
                                              21490.32884670199, 26289.409352381947, 22315.194536435913,
                                              10728.523212583894, -4715.481223690802, -18882.55022692908]])

        cal3 = CalculatorNormal("cos(sin(cos(sin((x-1.0*2)(3/x)(x^2-3)))))", -1.1, 2.3, 20)
        self.assertEqual(cal3.get_points(), [[-1.1, -0.9210526315789475, -0.7421052631578948, -0.5631578947368422,
                                              -0.38421052631578956, -0.20526315789473693, -0.026315789473684292,
                                              0.15263157894736845, 0.331578947368421, 0.5105263157894735,
                                              0.6894736842105262, 0.8684210526315788, 1.0473684210526315,
                                              1.2263157894736838, 1.405263157894737, 1.5842105263157893,
                                              1.763157894736842, 1.9421052631578943, 2.121052631578947, 2.3],
                                             [0.7281058093526633, 0.870125578532247, 0.8357893869555476,
                                              0.8267085699698995, 0.6849108171478525, 0.8299472330029442,
                                              0.8680849385382381, 0.8547361146306847, 0.6913480495261357,
                                              0.8405493326547503, 0.8587368368064492, 0.7424057491445539,
                                              0.830588939999681, 0.685383557640168, 0.8577989859035278,
                                              0.6955645602256761, 0.6667533310712499, 0.6673256423005866,
                                              0.6794887865586371, 0.794840017706577]])

        cal4 = CalculatorNormal("2(x+3)(tan(2))/(sin(x)^2)", 1.2, 4.9, 30)
        self.assertEqual(cal4.get_points(), [[1.2, 1.3275862068965516, 1.4551724137931035, 1.5827586206896551,
                                              1.7103448275862068, 1.8379310344827586, 1.9655172413793105,
                                              2.093103448275862, 2.220689655172414, 2.3482758620689657,
                                              2.475862068965517, 2.603448275862069, 2.731034482758621,
                                              2.8586206896551722, 2.9862068965517246, 3.113793103448276,
                                              3.2413793103448274, 3.3689655172413797, 3.496551724137931,
                                              3.6241379310344826, 3.751724137931035, 3.8793103448275863,
                                              4.006896551724138, 4.13448275862069, 4.2620689655172415,
                                              4.389655172413793, 4.517241379310345, 4.644827586206897,
                                              4.772413793103449, 4.9],
                                             [-21.128584370041754, -20.076196389276628, -19.73208119220586,
                                              -20.02988660928542, -20.99070433701428, -22.72565817539193,
                                              -25.465526599191467, -29.632194867191888, -35.993927574179075,
                                              -46.0160463797676, -62.73062899548261, -93.21444676871477,
                                              -157.2218277232811, -328.4133435007868, -1092.2367695193138,
                                              -34580.91186027438, -2748.3177910973236, -547.7445273039067,
                                              -235.0350909875499, -134.43632772374576, -89.87364600523851,
                                              -66.45376265213008, -52.83383500535425, -44.43958084558392,
                                              -39.15323444973351, -35.905102559601865, -34.134454474262,
                                              -33.56146582396314, -34.088741497620006, -35.76788229460917]])

        cal5 = CalculatorNormal("(x+1)^2 + pix^0.5", -1, 1, 10)
        self.assertEqual(cal5.get_points(), [[-1.0, -0.7777777777777778, -0.5555555555555556, -0.33333333333333337,
                                              -0.11111111111111116, 0.11111111111111116, 0.33333333333333326,
                                              0.5555555555555556, 0.7777777777777777, 1.0],
                                             [None, None, None, None, None, 2.2817654524311664, 3.591577142011995,
                                              4.761357996766662, 5.931118121182521, 7.141592653589793]])

    def test_derivation_calculator(self):
        cal1 = CalculatorDerivation("x", -10, 10, 20)
        self.assertEqual(cal1.get_points(), [[-10.0, -8.947368421052632, -7.894736842105264, -6.842105263157895,
                                              -5.7894736842105265, -4.7368421052631575, -3.6842105263157894,
                                              -2.6315789473684212, -1.578947368421053, -0.526315789473685,
                                              0.526315789473685, 1.578947368421053, 2.6315789473684212,
                                              3.6842105263157894, 4.7368421052631575, 5.789473684210526,
                                              6.842105263157894, 7.894736842105264, 8.94736842105263, 10.0],
                                             [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                              1.0, 1.0, 1.0, 1.0, 1.0]])

        cal2 = CalculatorDerivation("(x+1)^2 + pix^0.5", -1, 1, 10)
        self.assertEqual(cal2.get_points(), [[-1.0, -0.7777777777777778, -0.5555555555555556, -0.33333333333333337,
                                              -0.11111111111111116, 0.11111111111111116, 0.33333333333333326,
                                              0.5555555555555556, 0.7777777777777777, 1.0],
                                             [None, None, None, None, None, 202.43919207951365, 202.8799268598067,
                                              203.32185555304233, 203.76427810881185, 204.20699085153686]])

        cal3 = CalculatorDerivation("2(x+3)(tan(2))/(sin(x)^2)", -2, 2, 30)
        self.assertEqual(cal3.get_points(), [[-2.0, -1.8620689655172413, -1.7241379310344827, -1.5862068965517242,
                                              -1.4482758620689655, -1.3103448275862069, -1.1724137931034484,
                                              -1.0344827586206895, -0.896551724137931, -0.7586206896551724,
                                              -0.6206896551724137, -0.48275862068965525, -0.3448275862068966,
                                              -0.2068965517241379, -0.06896551724137923, 0.06896551724137945,
                                              0.2068965517241379, 0.34482758620689635, 0.48275862068965525,
                                              0.6206896551724137, 0.7586206896551726, 0.896551724137931,
                                              1.0344827586206895, 1.1724137931034484, 1.3103448275862069,
                                              1.4482758620689653, 1.5862068965517242, 1.7241379310344827,
                                              1.8620689655172415, 2.0],
                                             [-6.31935301113551, -7.8291504546579525, -10.390795373912175,
                                              -15.116598511683247, -25.16770553286225, -52.72347133531914,
                                              -184.93007339666644, -15654.549139878638, -300.58593804893485,
                                              -66.88757230777315, -29.322082167709638, -16.791664246664745,
                                              -11.070744731894033, -7.652140155980579, 0.07831363532340901,
                                              1.439475399470391, -4.147952213615155, -4.283563731844991,
                                              -4.253427943796338, -4.312920958399083, -4.51613781282253,
                                              -4.907380092202625, -5.559211636581491, -6.6063435318048445,
                                              -8.313804840447737, -11.249714098387406, -16.803561548032206,
                                              -29.14343852494876, -65.97680223731805, -289.83287682776006]])

        cal4 = CalculatorDerivation("2sin(x)x^3/x", 100, 117, 30)
        self.assertEqual(cal4.get_points(), [[100.0, 100.58620689655173, 101.17241379310344, 101.75862068965517,
                                              102.34482758620689, 102.93103448275862, 103.51724137931035,
                                              104.10344827586206, 104.6896551724138, 105.27586206896552,
                                              105.86206896551724, 106.44827586206897, 107.03448275862068,
                                              107.62068965517241, 108.20689655172414, 108.79310344827586,
                                              109.37931034482759, 109.9655172413793, 110.55172413793103,
                                              111.13793103448276, 111.72413793103448, 112.3103448275862,
                                              112.89655172413794, 113.48275862068965, 114.06896551724138,
                                              114.65517241379311, 115.24137931034483, 115.82758620689656,
                                              116.41379310344828, 117.0],
                                             [509.8815051062734, -1672.1332916879587, -3298.429717002721,
                                              -3824.8642601943416, -3074.040376531235, -1295.0816859606914,
                                              919.0238206270257, 2829.0856902868995, 3796.4924298714973,
                                              3496.7239305756793, 2028.20993676866, -119.98041985948039,
                                              -2231.014934245139, -3599.497814742886, -3767.174320305304,
                                              -2676.38137895437, -689.860598191371, 1529.8685611955325,
                                              3241.46275421179, 3872.346873000878, 3210.254457713351,
                                              1474.641978113517, -756.0478883640517, -2737.167477143739,
                                              -3806.4409191996638, -3605.3574498517614, -2199.3717589991725,
                                              -56.6119002900662, 2107.983845458202, 3571.2071584050364]])

    def test_error(self):
        """
        test if the tree's constructor can catch some invalid inputs
        :return:
        """
        try:
            cal1 = CalculatorNormal("())", -1, 2, 9)
            self.assertEqual(1, 0)
        except:
            self.assertEqual(1, 1)

        try:
            cal2 = CalculatorNormal("(()", 2, -1, 30)
            self.assertEqual(1, 0)
        except:
            self.assertEqual(1, 1)

        try:
            cal3 = CalculatorNormal("))", 2, -1, 15)
            self.assertEqual(1, 0)
        except:
            self.assertEqual(1, 1)


if __name__ == '__main__':
    unittest.main()
